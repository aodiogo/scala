:quit
:help

"Hello".intersect("World") // Yields "lo"

99.44.toInt //99

a+b // a.(+b)

1.to(10) // or 1 to 10

"Diogo".sorted

import scala.math._ // _ is wildcard

sqrt(2) //1.41...
pow(2,4) //16
min(3,Pi) //3

or use

scala.math.sqrt(4) //if you don't want to import

you can ommit the scala:

math.sqrt(4) // 2.0

BigInt.probablePrime(2, scala.util.Random)

val s = "Hello"
s(4) // o

or s.apply(4) //o

"Bonjour".sorted.apply(3) 

("Bonjour".sorted)(3)

BigInt("1234567890") same as BigInt.apply("1234567890") - creates a bigInt from String

Array(1,2,3,4)

"Bonjour".count(_.isUpper) // 1 ; counts the number of uppercase letters

"Diogo".containsSlice('i'.to('g')) //true

"crazy"*2 //gives crazycrazy

10 max 2 // gives 10

val nbr3: BigInt = 2
nbr3.pow(1024)

BigInt.probablePrime(100, util.Random).toString(36) //create 36 char random string


"Diogo"(0) //gives "D" first char

val name = "Diogo"
name(name.size - 1) //"o" last char

scala> "Diogo".take(2)
res2: String = Di

scala> "Diogo".drop(2)
res3: String = ogo

scala> "Diogo".drop(3)
res4: String = go

scala> "Diogo".takeRight(3)
res5: String = ogo

scala> "Diogo".dropRight(3)
res6: String = Di

scala> "Diogo".drop(2)
res7: String = ogo

scala> "Diogo".take(2)
res8: String = Di

scala> "Diogo".take(1000)
res9: String = Diogo

scala> "Diogo".drop(2)
res10: String = ogo

scala> "Diogo".drop(1000)
res11: String = ""

s = s0 + (v - v0) * t + // The + tells the parser that this is not the end

  0.5 * (a - a0) * t * t

printf("Hello, %s! You are %d years old.%n", name, age)


print(f"Hello, $name! In six months, you'll be ${age + 0.5}%7.2f years old.%n")


//a formatted string is prefixed w/ letter f

%7.2f => float nbr width 7, precision 2

f is better than printf cause it is type safe

printf(...)

To include a $ sign in an interpolated string, double it. For example, s"$$$price" yields a dollar sign followed by the value of price.

scala.io.StdIn

readInt
readDouble
readBoolean
...

val s = "Hello"

var sum = 0

for (i <- 0 to s.length - 1)

  sum += s(i)

Scala has no break or continue in loops

You can use a Boolean control value or import function Breaks

import scala.util.control.Breaks._
breakable {
   for (...) {
      if (...) break; // Exits the breakable block
      ...
   }
}


the break is made by throwing and catching an exception


val n = ...

for (n <- 1 to 10) {

  // Here n refers to the loop variable

}

In java, the code above would not compile


for (i <- 1 to 3; j <- 1 to 3) print(f"${10 * i + j}%3d")

  // Prints 11 12 13 21 22 23 31 32 33


for (i <- 1 to 3; j <- 1 to 3 if i != j) print(f"${10 * i + j}%3d")

  // Prints 12 13 21 23 31 32

if condition is called Guard.


for (i <- 1 to 3; from = 4 - i; j <- from to 3) print(f"${10 * i + j}%3d")

  // Prints 13 22 23 31 32 33

for (i <- 1 to 3; from = 4 - i; j <- from to 3) print(f"${10 * i + j}%3d")

  // Prints 13 22 23 31 32 33

for (i <- 1 to 10) yield i % 3

  // Yields Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)

for (c <- "Hello"; i <- 0 to 1) yield (c + i).toChar

// Yields "HIeflmlmop"

for (i <- 0 to 1; c <- "Hello") yield (c + i).toChar

  // Yields Vector('H', 'e', 'l', 'l', 'o', 'I', 'f', 'm', 'm', 'p')

This type of loop is called a for comprehension.

The generated collection is compatible with the first generator.

If you prefer, you can enclose the generators, guards, and definitions of a for loop in braces, and you can use newlines instead of semicolons to separate them:

for { i <- 1 to 3

  from = 4 - i

  j <- from to 3 }


FUNCTIONS

def abs(x: Double) = if (x >= 0) x else -x

def fac(n : Int) = {

  var r = 1

  for (i <- 1 to n) r = r * i

  r

}

return statement is not mandatory and usually not used in scala.

You need to specify the function return type when it is recursive:

def fac(n: Int): Int = if (n <= 0) 1 else n * fac(n - 1)

Default and named arguments:

def decorate(str: String, left: String = "[", right: String = "]") = left + str + right

You can specify parameter names when calling the function:

decorate(left = "<<<", str = "Hello", right = ">>>")

or

decorate("Hello", right = "]<<<") // Calls decorate("Hello", "[", "]<<<")

Variable number of arguments

	def sum(args: Int*) = {

  var result = 0

  for (arg <- args) result += arg

  result

}


	Call sum of 1 to 5:
	sum(1 to 5: _*) //tells the compiler that 1 to 5 is a Seq ; meaning 1,2,3,4,5

	Chapter 2. Control Structures and Functions

Topics in This Chapter Image

Image 2.1 Conditional Expressions

Image 2.2 Statement Termination

Image 2.3 Block Expressions and Assignments

Image 2.4 Input and Output

Image 2.5 Loops

Image 2.6 Advanced for Loops

Image 2.7 Functions

Image 2.8 Default and Named Arguments Image

Image 2.9 Variable Arguments Image

Image 2.10 Procedures

Image 2.11 Lazy Values Image

Image 2.12 Exceptions

Image Exercises

In this chapter, you will learn how to implement conditions, loops, and functions in Scala. You will encounter a fundamental difference between Scala and other programming languages. In Java or C++, we differentiate between expressions (such as 3 + 4) and statements (for example, an if statement). An expression has a value; a statement carries out an action. In Scala, almost all constructs have values. This feature can make programs more concise and easier to read.

Here are the highlights of this chapter:

• An if expression has a value.

• A block has a value—the value of its last expression.

• The Scala for loop is like an “enhanced” Java for loop.

• Semicolons are (mostly) optional.

• The void type is Unit.

• Avoid using return in a function.

• Beware of missing = in a function definition.

• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.

• Scala has no checked exceptions.
2.1 Conditional Expressions

Scala has an if/else construct with the same syntax as in Java or C++. However, in Scala, an if/else has a value, namely the value of the expression that follows the if or else. For example,

if (x > 0) 1 else -1

has a value of 1 or -1, depending on the value of x. You can put that value in a variable:

val s = if (x > 0) 1 else -1

This has the same effect as

if (x > 0) s = 1 else s = -1

However, the first form is better because it can be used to initialize a val. In the second form, s needs to be a var.

(As already mentioned, semicolons are mostly optional in Scala—see Section 2.2, “Statement Termination,” on page 19.)

Java and C++ have a ?: operator for this purpose. The expression

x > 0 ? 1 : -1 // Java or C++

is equivalent to the Scala expression if (x > 0) 1 else -1. However, you can’t put statements inside a ?: expression. The Scala if/else combines the if/else and ?: constructs that are separate in Java and C++.

In Scala, every expression has a type. For example, the expression if (x > 0) 1 else -1 has the type Int because both branches have the type Int. The type of a mixed-type expression, such as

if (x > 0) "positive" else -1

is the common supertype of both branches. In this example, one branch is a java.lang.String, and the other an Int. Their common supertype is called Any. (See Section 8.11, “The Scala Inheritance Hierarchy,” on page 100 for details.)

If the else part is omitted, for example in

if (x > 0) 1

then it is possible that the if statement yields no value. However, in Scala, every expression is supposed to have some value. This is finessed by introducing a class Unit that has one value, written as (). The if statement without an else is equivalent to

if (x > 0) 1 else ()

Think of () as a placeholder for “no useful value,” and of Unit as an analog of void in Java or C++.

(Technically speaking, void has no value whereas Unit has one value that signifies “no value.” If you are so inclined, you can ponder the difference between an empty wallet and a wallet with a bill labeled “no dollars.”)

Image Note

Scala has no switch statement, but it has a much more powerful pattern matching mechanism that we will discuss in Chapter 14. For now, just use a sequence of if statements.

Image Caution

The REPL is more nearsighted than the compiler—it only sees one line of code at a time. For example, when you type

Click here to view code image

if (x > 0) 1

else if (x == 0) 0 else -1

the REPL executes if (x > 0) 1 and shows the answer. Then it gets confused about the else keyword.

If you want to break the line before the else, use braces:

Click here to view code image

if (x > 0) { 1

} else if (x == 0) 0 else -1

This is only a concern in the REPL. In a compiled program, the parser will find the else on the next line.

Image Tip

If you want to paste a block of code into the REPL without worrying about its nearsightedness, use paste mode. Type

:paste

Then paste in the code block and type Ctrl+D. The REPL will then analyze the block in its entirety.
2.2 Statement Termination

In Java and C++, every statement ends with a semicolon. In Scala—like in JavaScript and other scripting languages—a semicolon is never required if it falls just before the end of the line. A semicolon is also optional before an }, an else, and similar locations where it is clear from context that the end of a statement has been reached.

However, if you want to have more than one statement on a single line, you need to separate them with semicolons. For example,

if (n > 0) { r = r * n; n -= 1 }

A semicolon is needed to separate r = r * n and n -= 1. Because of the }, no semicolon is needed after the second statement.

If you want to continue a long statement over two lines, make sure that the first line ends in a symbol that cannot be the end of a statement. An operator is often a good choice:

Click here to view code image

s = s0 + (v - v0) * t + // The + tells the parser that this is not the end

  0.5 * (a - a0) * t * t

In practice, long expressions usually involve function or method calls, and then you don’t need to worry much—after an opening (, the compiler won’t infer the end of a statement until it has seen the matching ).

In the same spirit, Scala programmers favor the Kernighan & Ritchie brace style:

if (n > 0) {

  r = r * n

  n -= 1

}

The line ending with a { sends a clear signal that there is more to come.

Many programmers coming from Java or C++ are initially uncomfortable about omitting semicolons. If you prefer to put them in, feel free to—they do no harm.
2.3 Block Expressions and Assignments

In Java or C++, a block statement is a sequence of statements enclosed in { }. You use a block statement whenever you need to put multiple actions in the body of a branch or loop statement.

In Scala, a { } block contains a sequence of expressions, and the result is also an expression. The value of the block is the value of the last expression.

This feature can be useful if the initialization of a val takes more than one step. For example,

Click here to view code image

val distance = { val dx = x - x0; val dy = y - y0; sqrt(dx * dx + dy * dy) }

The value of the { } block is the last expression, shown here in bold. The variables dx and dy, which were only needed as intermediate values in the computation, are neatly hidden from the rest of the program.

In Scala, assignments have no value—or, strictly speaking, they have a value of type Unit. Recall that the Unit type is the equivalent of the void type in Java and C++, with a single value written as ().

A block that ends with an assignment, such as

{ r = r * n; n -= 1 }

has a Unit value. This is not a problem, just something to be aware of when defining functions—see Section 2.7, “Functions,” on page 25.

Since assignments have Unit value, don’t chain them together.

x = y = 1 // No

The value of y = 1 is (), and it’s highly unlikely that you wanted to assign a Unit to x. (In contrast, in Java and C++, the value of an assignment is the value that is being assigned. In those languages, chained assignments are useful.)
2.4 Input and Output

To print a value, use the print or println function. The latter adds a newline character after the printout. For example,

print("Answer: ")

println(42)

yields the same output as

println("Answer: " + 42)

There is also a printf function with a C-style format string:

Click here to view code image

printf("Hello, %s! You are %d years old.%n", name, age)

Or better, use string interpolation

Click here to view code image

print(f"Hello, $name! In six months, you'll be ${age + 0.5}%7.2f years old.%n")

A formatted string is prefixed with the letter f. It contains expressions that are prefixed with $ and optionally followed by C-style format strings. The expression $name is replaced with the value of the variable name. The expression ${age + 0.5}%7.2f is replaced with the value of age + 0.5, formatted as a floating-point number of width 7 and precision 2. You need ${...} around expressions that are not variable names.

Using the f interpolator is better than using the printf method because it is type-safe. If you accidentally use %f with an expression that isn’t a number, the compiler reports an error.

Image Note

Formatted strings are one of three predefined string interpolators in the Scala library. With a prefix of s, strings can contain expressions but not format directives. With a prefix of raw, escape sequences in a string are not evaluated. For example, raw"\n is a newline" starts with a backslash and the letter n, not a newline character.

To include a $ sign in an interpolated string, double it. For example, s"$$$price" yields a dollar sign followed by the value of price.

You can also define your own interpolators—see Exercise 11 on page 32. However, interpolators that produce compile-time errors (such as the f interpolator) need to be implemented as “macros,” an experimental Scala feature that is beyond the scope of this book.

You can read a line of input from the console with the readLine method of the scala.io.StdIn class. To read a numeric, Boolean, or character value, use readInt, readDouble, readByte, readShort, readLong, readFloat, readBoolean, or readChar. The readLine method, but not the other ones, takes a prompt string:

Click here to view code image

import scala.io

val name = StdIn.readLine("Your name: ")

print("Your age: ")

val age = StdIn.readInt()

println(s"Hello, ${name}! Next year, you will be ${age + 1}.")
2.5 Loops

Scala has the same while and do loops as Java and C++. For example,

while (n > 0) {

  r = r * n

  n -= 1

}

Scala has no direct analog of the for (initialize; test; update) loop. If you need such a loop, you have two choices. You can use a while loop. Or, you can use a for statement like this:

for (i <- 1 to n)

  r = r * i

You saw the to method of the RichInt class in Chapter 1. The call 1 to n returns a Range of the numbers from 1 to n (inclusive).

The construct

for (i <- expr)

makes the variable i traverse all values of the expression to the right of the <-. Exactly how that traversal works depends on the type of the expression. For a Scala collection, such as a Range, the loop makes i assume each value in turn.

Image Note

There is no val or var before the variable in the for loop. The type of the variable is the element type of the collection. The scope of the loop variable extends until the end of the loop.

When traversing a string, you can loop over the index values:

Click here to view code image

val s = "Hello"

var sum = 0

for (i <- 0 to s.length - 1)

  sum += s(i)

In this example, there is actually no need to use indexes. You can directly loop over the characters:

Click here to view code image

var sum = 0

for (ch <- "Hello") sum += ch

In Scala, loops are not used as often as in other languages. As you will see in Chapter 12, you can often process the values in a sequence by applying a function to all of them, which can be done with a single method call.

Image Note

Scala has no break or continue statements to break out of a loop. What to do if you need a break? Here are a few options:

• Use a Boolean control variable.

• Use nested functions—you can return from the middle of a function.

• Use the break method in the Breaks object:

Click here to view code image

import scala.util.control.Breaks._
breakable {
   for (...) {
      if (...) break; // Exits the breakable block
      ...
   }
}

Here, the control transfer is done by throwing and catching an exception, so you should avoid this mechanism when time is of essence.

Image Note

In Java, you cannot have two local variables with the same name and overlapping scope. In Scala, there is no such prohibition, and the normal shadowing rule applies. For example, the following is perfectly legal:

Click here to view code image


val n = ...

for (n <- 1 to 10) {

  // Here n refers to the loop variable

}
2.6 Advanced for Loops

In the preceding section, you saw the basic form of the for loop. However, this construct is much richer in Scala than in Java or C++. This section covers the advanced features.

You can have multiple generators of the form variable <- expression. Separate them by semicolons. For example,

Click here to view code image

for (i <- 1 to 3; j <- 1 to 3) print(f"${10 * i + j}%3d")

  // Prints 11 12 13 21 22 23 31 32 33

Each generator can have a guard, a Boolean condition preceded by if:

Click here to view code image

for (i <- 1 to 3; j <- 1 to 3 if i != j) print(f"${10 * i + j}%3d")

  // Prints 12 13 21 23 31 32

Note that there is no semicolon before the if.

You can have any number of definitions, introducing variables that can be used inside the loop:

Click here to view code image

for (i <- 1 to 3; from = 4 - i; j <- from to 3) print(f"${10 * i + j}%3d")

  // Prints 13 22 23 31 32 33

When the body of the for loop starts with yield, the loop constructs a collection of values, one for each iteration:

Click here to view code image

for (i <- 1 to 10) yield i % 3

  // Yields Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)

This type of loop is called a for comprehension.

The generated collection is compatible with the first generator.

Click here to view code image

for (c <- "Hello"; i <- 0 to 1) yield (c + i).toChar

  // Yields "HIeflmlmop"

for (i <- 0 to 1; c <- "Hello") yield (c + i).toChar

  // Yields Vector('H', 'e', 'l', 'l', 'o', 'I', 'f', 'm', 'm', 'p')

Image Note

If you prefer, you can enclose the generators, guards, and definitions of a for loop in braces, and you can use newlines instead of semicolons to separate them:

Click here to view code image


for { i <- 1 to 3

  from = 4 - i

  j <- from to 3 }
2.7 Functions

Scala has functions in addition to methods. A method operates on an object, but a function doesn’t. C++ has functions as well, but in Java, you have to imitate them with static methods.

To define a function, specify the function’s name, parameters, and body like this:

Click here to view code image

def abs(x: Double) = if (x >= 0) x else -x

You must specify the types of all parameters. However, as long as the function is not recursive, you need not specify the return type. The Scala compiler determines the return type from the type of the expression to the right of the = symbol.

If the body of the function requires more than one expression, use a block. The last expression of the block becomes the value that the function returns. For example, the following function returns the value of r after the for loop.

Click here to view code image

def fac(n : Int) = {

  var r = 1

  for (i <- 1 to n) r = r * i

  r

}

There is no need for the return keyword in this example. It is possible to use return as in Java or C++, to exit a function immediately, but that is not commonly done in Scala.

Image Tip

While there is nothing wrong with using return in a named function (except the waste of seven keystrokes), it is a good idea to get used to life without return. Pretty soon, you will be using lots of anonymous functions, and there, return doesn’t return a value to the caller but breaks out to the enclosing named function. Think of return as a kind of break statement for functions, and only use it when you want that breakout functionality.

With a recursive function, you must specify the return type. For example,

Click here to view code image

def fac(n: Int): Int = if (n <= 0) 1 else n * fac(n - 1)

Without the return type, the Scala compiler couldn’t verify that the type of n * fac(n - 1) is an Int.

Image Note

Some programming languages (such as ML and Haskell) can infer the type of a recursive function, using the Hindley-Milner algorithm. However, this doesn’t work well in an object-oriented language. Extending the Hindley-Milner algorithm so it can handle subtypes is still a research problem.
2.8 Default and Named Arguments Image

You can provide default arguments for functions that are used when you don’t specify explicit values. For example,

Click here to view code image

def decorate(str: String, left: String = "[", right: String = "]") =

  left + str + right

This function has two parameters, left and right, with default arguments "[" and "]".

If you call decorate("Hello"), you get "[Hello]". If you don’t like the defaults, supply your own: decorate("Hello", "<<<", ">>>").

If you supply fewer arguments than there are parameters, the defaults are applied from the end. For example, decorate("Hello", ">>>[") uses the default value of the right parameter, yielding ">>>[Hello]".

You can also specify the parameter names when you supply the arguments. For example,

Click here to view code image

decorate(left = "<<<", str = "Hello", right = ">>>")

The result is "<<<Hello>>>". Note that the named arguments need not be in the same order as the parameters.

Named arguments can make a function call more readable. They are also useful if a function has many default parameters.

You can mix unnamed and named arguments, provided the unnamed ones come first:

Click here to view code image

decorate("Hello", right = "]<<<") // Calls decorate("Hello", "[", "]<<<")
2.9 Variable Arguments Image

Sometimes, it is convenient to implement a function that can take a variable number of arguments. The following example shows the syntax:

Click here to view code image

def sum(args: Int*) = {

  var result = 0

  for (arg <- args) result += arg

  result

}

You can call this function with as many arguments as you like.

val s = sum(1, 4, 9, 16, 25)

The function receives a single parameter of type Seq, which we will discuss in Chapter 13. For now, all you need to know is that you can use a for loop to visit each element.

If you already have a sequence of values, you cannot pass it directly to such a function. For example, the following is not correct:

val s = sum(1 to 5) // Error

If the sum function is called with one argument, that must be a single integer, not a range of integers. The remedy is to tell the compiler that you want the parameter to be considered an argument sequence. Append : _*, like this:

Click here to view code image

val s = sum(1 to 5: _*) // Consider 1 to 5 as an argument sequence

This call syntax is needed in a recursive definition:

Click here to view code image

def recursiveSum(args: Int*) : Int = {

  if (args.length == 0) 0

  else args.head + recursiveSum(args.tail : _*)

}

Here, the head of a sequence is its initial element, and tail is a sequence of all other elements. That’s again a Seq, and we have to use : _* to convert it to an argument sequence.


When you call a Java method with variable arguments of type Object, such as PrintStream.printf or MessageFormat.format, you need to convert any primitive types by hand. For example,

val str = MessageFormat.format("The answer to {0} is {1}",

  "everything", 42.asInstanceOf[AnyRef])


Procedures

It does not return anything.

def box(s: String) {
	val border = "-"*(s.length + 2)
	printf(f"$border%n|$s|%n$border%n")
}

or

def box(s: String): Unit = {
...
}


Lazy Values

When a val is declared as lazy, its initialization is deferred until it is accessed for the first time. For example,

lazy val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString

it will only access the file when the value is read. So, if you misspel the filename, it will be not be caught in compile time.

val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString

  // Evaluated as soon as words is defined

lazy val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString

  // Evaluated the first time words is used

def words = scala.io.Source.fromFile("/usr/share/dict/words").mkString

  // Evaluated every time words is used


Exceptions

As in Java, the objects that you throw need to belong to a subclass of java.lang.Throwable

In Scala, there is no checked exceptions (you never have to declare that a function or method throws an exception).

A throw expression has the special type Nothing. That is useful in if/else expressions. If one branch has type Nothing, the type of the if/else expression is the type of the other branch. For example, consider

Click here to view code image

if (x >= 0) { sqrt(x)

} else throw new IllegalArgumentException("x should not be negative")

The first branch has type Double, the second has type Nothing. Therefore, the if/else expression also has type Double.

The syntax for catching exceptions is modeled after the pattern matching syntax (see Chapter 14).

val url = new URL("http://horstmann.com/fred-tiny.gif")

try {

  process(url)

} catch {

  case _: MalformedURLException => println(s"Bad URL: $url")

  case ex: IOException => ex.printStackTrace()

}

val in = new URL("http://horstmann.com/fred.gif").openStream()

try {

  process(in)

} finally {

  in.close()

}

Scala does not have an analog to the Java try-with-resources statement. Consider using the scala-ARM library (http://jsuereth.com/scala-arm). Then you can write

Click here to view code image

import resource._

import java.nio.file._

for (in <- resource(Files.newBufferedReader(inPath));

    out <- resource(Files.newBufferedWriter(outPath))) {

  ...

}


If an exception occurs in either of the calls to toInt, or because of division by zero, then result is a Failure object, containing the exception that caused the computation to fail. Otherwise, result is a Success object holding the result of the computation.




