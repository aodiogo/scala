:quit
:help

"Hello".intersect("World") // Yields "lo"

99.44.toInt //99

a+b // a.(+b)

1.to(10) // or 1 to 10

"Diogo".sorted

import scala.math._ // _ is wildcard

sqrt(2) //1.41...
pow(2,4) //16
min(3,Pi) //3

or use

scala.math.sqrt(4) //if you don't want to import

you can ommit the scala:

math.sqrt(4) // 2.0

BigInt.probablePrime(2, scala.util.Random)

val s = "Hello"
s(4) // o

or s.apply(4) //o

"Bonjour".sorted.apply(3) 

("Bonjour".sorted)(3)

BigInt("1234567890") same as BigInt.apply("1234567890") - creates a bigInt from String

Array(1,2,3,4)

"Bonjour".count(_.isUpper) // 1 ; counts the number of uppercase letters

"Diogo".containsSlice('i'.to('g')) //true

"crazy"*2 //gives crazycrazy

10 max 2 // gives 10

val nbr3: BigInt = 2
nbr3.pow(1024)

BigInt.probablePrime(100, util.Random).toString(36) //create 36 char random string


"Diogo"(0) //gives "D" first char

val name = "Diogo"
name(name.size - 1) //"o" last char

scala> "Diogo".take(2)
res2: String = Di

scala> "Diogo".drop(2)
res3: String = ogo

scala> "Diogo".drop(3)
res4: String = go

scala> "Diogo".takeRight(3)
res5: String = ogo

scala> "Diogo".dropRight(3)
res6: String = Di

scala> "Diogo".drop(2)
res7: String = ogo

scala> "Diogo".take(2)
res8: String = Di

scala> "Diogo".take(1000)
res9: String = Diogo

scala> "Diogo".drop(2)
res10: String = ogo

scala> "Diogo".drop(1000)
res11: String = ""

s = s0 + (v - v0) * t + // The + tells the parser that this is not the end

  0.5 * (a - a0) * t * t

printf("Hello, %s! You are %d years old.%n", name, age)


print(f"Hello, $name! In six months, you'll be ${age + 0.5}%7.2f years old.%n")


//a formatted string is prefixed w/ letter f

%7.2f => float nbr width 7, precision 2

f is better than printf cause it is type safe

printf(...)

To include a $ sign in an interpolated string, double it. For example, s"$$$price" yields a dollar sign followed by the value of price.

scala.io.StdIn

readInt
readDouble
readBoolean
...

val s = "Hello"

var sum = 0

for (i <- 0 to s.length - 1)

  sum += s(i)

Scala has no break or continue in loops

You can use a Boolean control value or import function Breaks

import scala.util.control.Breaks._
breakable {
   for (...) {
      if (...) break; // Exits the breakable block
      ...
   }
}


the break is made by throwing and catching an exception


val n = ...

for (n <- 1 to 10) {

  // Here n refers to the loop variable

}

In java, the code above would not compile


for (i <- 1 to 3; j <- 1 to 3) print(f"${10 * i + j}%3d")

  // Prints 11 12 13 21 22 23 31 32 33


for (i <- 1 to 3; j <- 1 to 3 if i != j) print(f"${10 * i + j}%3d")

  // Prints 12 13 21 23 31 32

if condition is called Guard.


for (i <- 1 to 3; from = 4 - i; j <- from to 3) print(f"${10 * i + j}%3d")

  // Prints 13 22 23 31 32 33

for (i <- 1 to 3; from = 4 - i; j <- from to 3) print(f"${10 * i + j}%3d")

  // Prints 13 22 23 31 32 33

for (i <- 1 to 10) yield i % 3

  // Yields Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)

for (c <- "Hello"; i <- 0 to 1) yield (c + i).toChar

// Yields "HIeflmlmop"

for (i <- 0 to 1; c <- "Hello") yield (c + i).toChar

  // Yields Vector('H', 'e', 'l', 'l', 'o', 'I', 'f', 'm', 'm', 'p')

This type of loop is called a for comprehension.

The generated collection is compatible with the first generator.

If you prefer, you can enclose the generators, guards, and definitions of a for loop in braces, and you can use newlines instead of semicolons to separate them:

for { i <- 1 to 3

  from = 4 - i

  j <- from to 3 }




